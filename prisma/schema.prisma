// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  stories       Story[]
  continuations StoryContinuation[]
  votes         Vote[]
  comments      Comment[]
}

model Story {
  id             Int                @id @default(autoincrement())
  userId         Int
  title          String
  content        String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id])
  continuations  StoryContinuation[]
  comments       Comment[]
}

model StoryContinuation {
  id         Int      @id @default(autoincrement())
  storyId    Int
  userId     Int
  content    String
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  story      Story    @relation(fields: [storyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  votes      Vote[]
  comments   Comment[]
}

model Vote {
  id             Int              @id @default(autoincrement())
  continuationId Int
  userId         Int
  createdAt      DateTime         @default(now())
  continuation   StoryContinuation @relation(fields: [continuationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@unique([continuationId, userId])
}

model Comment {
  id             Int                @id @default(autoincrement())
  content        String
  userId         Int
  storyId        Int?
  continuationId Int?
  parentId       Int?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id])
  story          Story?             @relation(fields: [storyId], references: [id])
  continuation   StoryContinuation? @relation(fields: [continuationId], references: [id])
  parent         Comment?           @relation("CommentToComment", fields: [parentId], references: [id])
  replies        Comment[]          @relation("CommentToComment")
}
